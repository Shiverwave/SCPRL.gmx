<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize Stack
DrawShadow=ds_stack_create();
global.breach = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Add all walls to DrawShadow stack
with (objBlockVision)
    ds_stack_push(ShadowControl.DrawShadow,id);

//Draw all wall shadows
while (ds_stack_size(DrawShadow)&gt;0)
{
    draw_set_color(c_black);

    HoldID=ds_stack_pop(DrawShadow);
    HoldX=HoldID.x;
    HoldY=HoldID.y;
    
    draw_primitive_begin(pr_trianglestrip);
    draw_vertex(HoldX,HoldY);
    draw_vertex(HoldX+lengthdir_x(2000,point_direction(Player.x,Player.y,HoldX,HoldY)),HoldY+lengthdir_y(2000,point_direction(Player.x,Player.y,HoldX,HoldY)));
    draw_vertex(HoldX+32,HoldY);
    draw_vertex(HoldX+32+lengthdir_x(2000,point_direction(Player.x,Player.y,HoldX+32,HoldY)),HoldY+lengthdir_y(2000,point_direction(Player.x,Player.y,HoldX+32,HoldY)));
    draw_vertex(HoldX+32,HoldY+32);
    draw_vertex(HoldX+32+lengthdir_x(2000,point_direction(Player.x,Player.y,HoldX+32,HoldY+32)),HoldY+32+lengthdir_y(2000,point_direction(Player.x,Player.y,HoldX+32,HoldY+32)));
    draw_vertex(HoldX,HoldY+32);
    draw_vertex(HoldX+lengthdir_x(2000,point_direction(Player.x,Player.y,HoldX,HoldY+32)),HoldY+32+lengthdir_y(2000,point_direction(Player.x,Player.y,HoldX,HoldY+32)));
    draw_vertex(HoldX,HoldY);
    draw_primitive_end();
}

//Draw Player View Cone
draw_set_color(c_black);
draw_primitive_begin(pr_trianglestrip);
draw_vertex(Player.x,Player.y);
draw_vertex(Player.x+lengthdir_x(2000,Player.direction+45),Player.y+lengthdir_y(2000,Player.direction+45));
draw_vertex(Player.x+lengthdir_x(2000,Player.direction+135),Player.y+lengthdir_y(2000,Player.direction+135));
draw_vertex(Player.x+lengthdir_x(2000,Player.direction-135),Player.y+lengthdir_y(2000,Player.direction-135));
draw_vertex(Player.x+lengthdir_x(2000,Player.direction-45),Player.y+lengthdir_y(2000,Player.direction-45));
draw_vertex(Player.x,Player.y);
draw_primitive_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
